// cpp-stalin (c) Nikolas Wipper 2021

/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/. */

#ifndef CPP_STALIN_INCLUDE_UTILITY__
#define CPP_STALIN_INCLUDE_UTILITY__

#include "__config"
#ifndef STALIN_CXX_STD_FREESTANDING

#include "__declval"
#include "type_traits"

namespace std {

template< class T >
STALIN_CONSTEXPR_SINCE_14 typename std::remove_reference<T>::type&& move( T&& t ) noexcept {
    return static_cast<typename std::remove_reference<T>::type&&>(t);
}

template <class T>
STALIN_CONSTEXPR_SINCE_20 void swap(T &a, T &b) noexcept(is_nothrow_move_constructible<T>::value && is_nothrow_move_assignable<T>::value) {
    T c(std::move(a));
    a = std::move(b);
    b = std::move(c);
}

template <class T, size_t N>
STALIN_CONSTEXPR_SINCE_20 void swap(T (&a)[N], T (&b)[N]) noexcept(noexcept(swap(*a, *b))) {
    for (size_t i = 0; i < N; ++i) swap(a[i], b[i]);
}

#ifndef STALIN_CXX_STD_SINCE_14
template <class T>
T &&forward(typename std::remove_reference<T>::type &t) noexcept {
    return static_cast<T &&>(t);
}

template <class T>
T &&forward(typename std::remove_reference<T>::type &&t) noexcept {
    return static_cast<T &&>(t);
}
#else
template <class T>
constexpr T &&forward(std::remove_reference_t<T> &t) noexcept {
    return static_cast<T &&>(t);
}

template <class T>
constexpr T &&forward(std::remove_reference_t<T> &&t) noexcept {
    return static_cast<T &&>(t);
}
#endif
}

#endif // ifndef STALIN_CXX_STD_FREESTANDING

#endif //CPP_STALIN_INCLUDE_UTILITY__
