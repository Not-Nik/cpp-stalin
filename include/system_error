// cpp-stalin (c) Nikolas Wipper 2021

/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/. */

#ifndef CPP_STALIN_INCLUDE_SYSTEM_ERROR__
#define CPP_STALIN_INCLUDE_SYSTEM_ERROR__

#include "__config"
#ifndef STALIN_CXX_STD_FREESTANDING

#include "cerrno"
#include "iosfwd"
#include "stdexcept"
#include "type_traits"

namespace std {

class error_code;

class error_category;

class error_condition;

template <class T> struct is_error_code_enum : public false_type {};

template <class T> STALIN_NONSTRICT_MAYBE_UNUSED inline constexpr bool is_error_code_enum_v = is_error_code_enum<T>::value;

enum class errc {
    address_family_not_supported STALIN_NONSTRICT_MAYBE_UNUSED = EAFNOSUPPORT,
    address_in_use STALIN_NONSTRICT_MAYBE_UNUSED = EADDRINUSE,
    address_not_available STALIN_NONSTRICT_MAYBE_UNUSED = EADDRNOTAVAIL,
    already_connected STALIN_NONSTRICT_MAYBE_UNUSED = EISCONN,
    argument_list_too_long STALIN_NONSTRICT_MAYBE_UNUSED = E2BIG,
    argument_out_of_domain STALIN_NONSTRICT_MAYBE_UNUSED = EDOM,
    bad_address STALIN_NONSTRICT_MAYBE_UNUSED = EFAULT,
    bad_file_descriptor STALIN_NONSTRICT_MAYBE_UNUSED = EBADF,
    bad_message STALIN_NONSTRICT_MAYBE_UNUSED = EBADMSG,
    broken_pipe STALIN_NONSTRICT_MAYBE_UNUSED = EPIPE,
    connection_aborted STALIN_NONSTRICT_MAYBE_UNUSED = ECONNABORTED,
    connection_already_in_progress STALIN_NONSTRICT_MAYBE_UNUSED = EALREADY,
    connection_refused STALIN_NONSTRICT_MAYBE_UNUSED = ECONNREFUSED,
    connection_reset STALIN_NONSTRICT_MAYBE_UNUSED = ECONNRESET,
    cross_device_link STALIN_NONSTRICT_MAYBE_UNUSED = EXDEV,
    destination_address_required STALIN_NONSTRICT_MAYBE_UNUSED = EDESTADDRREQ,
    device_or_resource_busy STALIN_NONSTRICT_MAYBE_UNUSED = EBUSY,
    directory_not_empty STALIN_NONSTRICT_MAYBE_UNUSED = ENOTEMPTY,
    executable_format_error STALIN_NONSTRICT_MAYBE_UNUSED = ENOEXEC,
    file_exists STALIN_NONSTRICT_MAYBE_UNUSED = EEXIST,
    file_too_large STALIN_NONSTRICT_MAYBE_UNUSED = EFBIG,
    filename_too_long STALIN_NONSTRICT_MAYBE_UNUSED = ENAMETOOLONG,
    function_not_supported STALIN_NONSTRICT_MAYBE_UNUSED = ENOSYS,
    host_unreachable STALIN_NONSTRICT_MAYBE_UNUSED = EHOSTUNREACH,
    identifier_removed STALIN_NONSTRICT_MAYBE_UNUSED = EIDRM,
    illegal_byte_sequence STALIN_NONSTRICT_MAYBE_UNUSED = EILSEQ,
    inappropriate_io_control_operation STALIN_NONSTRICT_MAYBE_UNUSED = ENOTTY,
    interrupted STALIN_NONSTRICT_MAYBE_UNUSED = EINTR,
    invalid_argument STALIN_NONSTRICT_MAYBE_UNUSED = EINVAL,
    invalid_seek STALIN_NONSTRICT_MAYBE_UNUSED = ESPIPE,
    io_error STALIN_NONSTRICT_MAYBE_UNUSED = EIO,
    is_a_directory STALIN_NONSTRICT_MAYBE_UNUSED = EISDIR,
    message_size STALIN_NONSTRICT_MAYBE_UNUSED = EMSGSIZE,
    network_down STALIN_NONSTRICT_MAYBE_UNUSED = ENETDOWN,
    network_reset STALIN_NONSTRICT_MAYBE_UNUSED = ENETRESET,
    network_unreachable STALIN_NONSTRICT_MAYBE_UNUSED = ENETUNREACH,
    no_buffer_space STALIN_NONSTRICT_MAYBE_UNUSED = ENOBUFS,
    no_child_process STALIN_NONSTRICT_MAYBE_UNUSED = ECHILD,
    no_link STALIN_NONSTRICT_MAYBE_UNUSED = ENOLINK,
    //no_lock_available STALIN_NONSTRICT_MAYBE_UNUSED = ENOLOCK, // not available with gcc and clang
    no_message STALIN_NONSTRICT_MAYBE_UNUSED = ENOMSG,
    no_message_available STALIN_NONSTRICT_MAYBE_UNUSED = ENODATA,
    no_protocol_option STALIN_NONSTRICT_MAYBE_UNUSED = ENOPROTOOPT,
    no_space_on_device STALIN_NONSTRICT_MAYBE_UNUSED = ENOSPC,
    no_stream_resources STALIN_NONSTRICT_MAYBE_UNUSED = ENOSR,
    no_such_device STALIN_NONSTRICT_MAYBE_UNUSED = ENODEV,
    no_such_device_or_address STALIN_NONSTRICT_MAYBE_UNUSED = ENXIO,
    no_such_file_or_directory STALIN_NONSTRICT_MAYBE_UNUSED = ENOENT,
    no_such_process STALIN_NONSTRICT_MAYBE_UNUSED = ESRCH,
    not_a_directory STALIN_NONSTRICT_MAYBE_UNUSED = ENOTDIR,
    not_a_socket STALIN_NONSTRICT_MAYBE_UNUSED = ENOTSOCK,
    not_a_stream STALIN_NONSTRICT_MAYBE_UNUSED = ENOSTR,
    not_connected STALIN_NONSTRICT_MAYBE_UNUSED = ENOTCONN,
    not_enough_memory STALIN_NONSTRICT_MAYBE_UNUSED = ENOMEM,
    not_supported STALIN_NONSTRICT_MAYBE_UNUSED = ENOTSUP,
    operation_canceled STALIN_NONSTRICT_MAYBE_UNUSED = ECANCELED,
    operation_in_progress STALIN_NONSTRICT_MAYBE_UNUSED = EINPROGRESS,
    operation_not_permitted STALIN_NONSTRICT_MAYBE_UNUSED = EPERM,
    operation_not_supported STALIN_NONSTRICT_MAYBE_UNUSED = EOPNOTSUPP,
    operation_would_block STALIN_NONSTRICT_MAYBE_UNUSED = EWOULDBLOCK,
    owner_dead STALIN_NONSTRICT_MAYBE_UNUSED = EOWNERDEAD,
    permission_denied STALIN_NONSTRICT_MAYBE_UNUSED = EACCES,
    protocol_error STALIN_NONSTRICT_MAYBE_UNUSED = EPROTO,
    protocol_not_supported STALIN_NONSTRICT_MAYBE_UNUSED = EPROTONOSUPPORT,
    read_only_file_system STALIN_NONSTRICT_MAYBE_UNUSED = EROFS,
    resource_deadlock_would_occur STALIN_NONSTRICT_MAYBE_UNUSED = EDEADLK,
    resource_unavailable_try_again STALIN_NONSTRICT_MAYBE_UNUSED = EAGAIN,
    result_out_of_range STALIN_NONSTRICT_MAYBE_UNUSED = ERANGE,
    state_not_recoverable STALIN_NONSTRICT_MAYBE_UNUSED = ENOTRECOVERABLE,
    stream_timeout STALIN_NONSTRICT_MAYBE_UNUSED = ETIME,
    text_file_busy STALIN_NONSTRICT_MAYBE_UNUSED = ETXTBSY,
    timed_out STALIN_NONSTRICT_MAYBE_UNUSED = ETIMEDOUT,
    too_many_files_open STALIN_NONSTRICT_MAYBE_UNUSED = EMFILE,
    too_many_files_open_in_system STALIN_NONSTRICT_MAYBE_UNUSED = ENFILE,
    too_many_links STALIN_NONSTRICT_MAYBE_UNUSED = EMLINK,
    too_many_symbolic_link_levels STALIN_NONSTRICT_MAYBE_UNUSED = ELOOP,
    value_too_large STALIN_NONSTRICT_MAYBE_UNUSED = EOVERFLOW,
    wrong_protocol_type STALIN_NONSTRICT_MAYBE_UNUSED = EPROTOTYPE
};

template <class T> struct is_error_condition_enum : public false_type {};
template <> struct is_error_condition_enum<errc> : true_type {};

const error_category &generic_category() noexcept;
const error_category &system_category() noexcept;
error_code make_error_code(errc e) noexcept;
error_condition make_error_condition(errc e) noexcept;

class error_code {
    int value_ = 0;
    error_category &cat_;

    friend bool operator==(const error_code &lhs, const error_code &rhs) noexcept;
    friend bool operator!=(const error_code &lhs, const error_code &rhs) noexcept;
    friend bool operator<(const error_code &lhs, const error_code &rhs) noexcept;

    friend bool operator==(const error_code &lhs, const error_condition &rhs) noexcept;
    friend bool operator==(const error_condition &lhs, const error_code &rhs) noexcept;
    friend bool operator!=(const error_code &lhs, const error_condition &rhs) noexcept;
    friend bool operator!=(const error_condition &lhs, const error_code &rhs) noexcept;

    template <class charT, class traits>
    friend basic_ostream<charT, traits> &operator<<(basic_ostream<charT, traits> &os, const error_code &ec);
public:
    error_code() noexcept
        : value_(0), cat_((error_category &) system_category()) {}
    error_code(int val, const error_category &cat) noexcept
        : value_(val), cat_((error_category &) cat) {}
    template <class ErrorCodeEnum>
    error_code(ErrorCodeEnum e) noexcept;

    void assign(int val, const error_category &cat) noexcept;

    template <class ErrorCodeEnum>
    error_code &operator=(ErrorCodeEnum e) noexcept;

    void clear() noexcept;
    STALIN_NONSTRICT_NODISCARD int value() const noexcept { return value_; }
    STALIN_NONSTRICT_NODISCARD const error_category &category() const noexcept { return cat_; }
    STALIN_NONSTRICT_NODISCARD error_condition default_error_condition() const noexcept;
    //STALIN_NONSTRICT_NODISCARD string message() const; // todo strings

    explicit operator bool() const noexcept { return value_ != 0; }
};

template <class ErrorCodeEnum>
error_code &error_code::operator=(ErrorCodeEnum e) noexcept {
    if (is_error_code_enum<ErrorCodeEnum>::value)
        *this = make_error_code(e);
    return *this;
}

bool operator==(const error_code &lhs, const error_code &rhs) noexcept;
bool operator==(const error_condition &lhs, const error_condition &rhs) noexcept;
bool operator==(const error_code &lhs, const error_condition &rhs) noexcept;
#ifndef STALIN_CXX_STD_SINCE_20
bool operator!=(const error_code &lhs, const error_code &rhs) noexcept;
bool operator<(const error_code &lhs, const error_code &rhs) noexcept;

bool operator!=(const error_condition &lhs, const error_condition &rhs) noexcept;
bool operator<(const error_condition &lhs, const error_condition &rhs) noexcept;

bool operator==(const error_condition &lhs, const error_code &rhs) noexcept;
bool operator!=(const error_code &lhs, const error_condition &rhs) noexcept;
bool operator!=(const error_condition &lhs, const error_code &rhs) noexcept;
#else
//std::strong_ordering operator<=>( const std::error_code& lhs, const std::error_code& rhs ) noexcept; // todo <compare>
//std::strong_ordering operator<=>( const std::error_condition& lhs, const std::error_condition& rhs ) noexcept; // todo <compare>
#endif

class error_condition {
    int value_;
    error_category &cat_;

    friend bool operator==(const error_condition &lhs, const error_condition &rhs) noexcept;
    friend bool operator!=(const error_condition &lhs, const error_condition &rhs) noexcept;
    friend bool operator<(const error_condition &lhs, const error_condition &rhs) noexcept;

    friend bool operator==(const error_code &lhs, const error_condition &rhs) noexcept;
    friend bool operator==(const error_condition &lhs, const error_code &rhs) noexcept;
    friend bool operator!=(const error_code &lhs, const error_condition &rhs) noexcept;
    friend bool operator!=(const error_condition &lhs, const error_code &rhs) noexcept;

public:
    error_condition() noexcept
        : value_(0), cat_((error_category &) system_category()) {}
    error_condition(int val, const error_category &cat) noexcept
        : value_(val), cat_((error_category &) cat) {}
    template <class ErrorConditionEnum>
    error_condition(ErrorConditionEnum e) noexcept { if (is_error_condition_enum<ErrorConditionEnum>::value) *this = make_error_condition(e); }

    void assign(int val, const error_category &cat) noexcept;

    template <class ErrorConditionEnum>
    error_condition &operator=(ErrorConditionEnum e) noexcept;

    void clear() noexcept;
    STALIN_NONSTRICT_NODISCARD int value() const noexcept { return value_; }
    STALIN_NONSTRICT_NODISCARD const error_category &category() const noexcept { return cat_; }
    //STALIN_NONSTRICT_NODISCARD string message() const; // todo strings

    explicit operator bool() const noexcept { return value_ != 0; }
};

template <class ErrorConditionEnum>
error_condition &error_condition::operator=(ErrorConditionEnum e) noexcept {
    if (is_error_condition_enum<ErrorConditionEnum>::value)
        *this = make_error_condition(e);
    return *this;
}

class error_category {
public:
    error_category() = default;
    error_category(const error_category &) = delete;

    virtual ~error_category() = default;

    bool operator==(const error_category &rhs) const noexcept { return this == &rhs; }
    #ifndef STALIN_CXX_STD_SINCE_20
    bool operator!=(const error_category &rhs) const noexcept { return this != &rhs; }
    bool operator<(const error_category &rhs) const noexcept { return this < &rhs; }
    #else
    //std::strong_ordering operator<=>( const error_category& rhs ) const noexcept; // todo <compare>
    #endif

    STALIN_NONSTRICT_NODISCARD virtual const char *name() const noexcept = 0;
    STALIN_NONSTRICT_NODISCARD virtual error_condition default_error_condition(int val) const noexcept { return error_condition(val, *this); }
    STALIN_NONSTRICT_NODISCARD virtual bool equivalent(int valcode, const error_condition &cond) const noexcept {
        return default_error_condition(valcode) == cond;
    }
    STALIN_NONSTRICT_NODISCARD virtual bool equivalent(const error_code &code, int valcond) const noexcept {
        return *this == code.category() && code.value() == valcond;
    }
    //virtual string message(int val) const = 0; // todo strings
};

template <class charT, class traits>
basic_ostream<charT, traits> &operator<<(basic_ostream<charT, traits> &os, const error_code &ec) {
    os << ec.cat_.name() << ':' << ec.value_;
}

template <class ErrorCodeEnum>
std::error_code::error_code(ErrorCodeEnum e) noexcept
    : cat_((error_category &) generic_category()) {
    if (is_error_code_enum<ErrorCodeEnum>::value) {
        auto code = make_error_code((errc) e);
        this->cat_ = code.cat_;
        this->value_ = code.value_;
    }
}

class system_error : public runtime_error {
    error_code code_;
public:
    //system_error(error_code ec, const string &what_arg); // todo strings
    system_error(error_code ec, const char *what_arg)
        : runtime_error(what_arg), code_(ec) {}
    STALIN_NONSTRICT_MAYBE_UNUSED system_error(error_code ec)
        : runtime_error("system_error"), code_(ec) {}
    //system_error(int val, const error_category &cat, const string &what_arg); // todo strings
    STALIN_NONSTRICT_MAYBE_UNUSED system_error(int val, const error_category &cat, const char *what_arg)
        : runtime_error(what_arg), code_(val, cat) {}
    STALIN_NONSTRICT_MAYBE_UNUSED system_error(int val, const error_category &cat)
        : runtime_error("system_error"), code_(val, cat) {}
};
}

#endif

#endif //CPP_STALIN_INCLUDE_SYSTEM_ERROR__
