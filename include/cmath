// cpp-stalin (c) Nikolas Wipper 2021

/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/. */

#ifndef CPP_STALIN_INCLUDE_CMATH__
#define CPP_STALIN_INCLUDE_CMATH__

#include "__config"
#ifndef STALIN_CXX_STD_FREESTANDING

#include <math.h>
#include "__math"
#include "numbers"
#include "type_traits"

namespace std {

typedef float float_t;
typedef double double_t;

// Fixme: These inline functions throw errors if fabs* doesn't exist.
//  Microsoft has a way to work around that (__if_exists), but other
//  compilers don't
inline float abs(float arg) { return fabsf(arg); }
inline double abs(double arg) { return fabs(arg); }
inline long double abs(long double arg) { return fabsl(arg); }
STALIN_USING_IF_EXISTS(::fabs);
STALIN_USING_IF_EXISTS(::fabsf);
STALIN_USING_IF_EXISTS(::fabsl);

STALIN_USING_IF_EXISTS(::fmod);
STALIN_USING_IF_EXISTS(::fmodf);
STALIN_USING_IF_EXISTS(::fmodl);

STALIN_USING_IF_EXISTS(::remainder);
STALIN_USING_IF_EXISTS(::remainderf);
STALIN_USING_IF_EXISTS(::remainderl);

STALIN_USING_IF_EXISTS(::remquo);
STALIN_USING_IF_EXISTS(::remquof);
STALIN_USING_IF_EXISTS(::remquol);

STALIN_USING_IF_EXISTS(::fma);
STALIN_USING_IF_EXISTS(::fmaf);
STALIN_USING_IF_EXISTS(::fmal);

STALIN_USING_IF_EXISTS(::fmax);
STALIN_USING_IF_EXISTS(::fmaxf);
STALIN_USING_IF_EXISTS(::fmaxl);

STALIN_USING_IF_EXISTS(::fmin);
STALIN_USING_IF_EXISTS(::fminf);
STALIN_USING_IF_EXISTS(::fminl);

STALIN_USING_IF_EXISTS(::fdim);
STALIN_USING_IF_EXISTS(::fdimf);
STALIN_USING_IF_EXISTS(::fdiml);

STALIN_USING_IF_EXISTS(::nan);
STALIN_USING_IF_EXISTS(::nanf);
STALIN_USING_IF_EXISTS(::nanl);

STALIN_USING_IF_EXISTS(::exp);
STALIN_USING_IF_EXISTS(::expf);
STALIN_USING_IF_EXISTS(::expl);

STALIN_USING_IF_EXISTS(::exp2);
STALIN_USING_IF_EXISTS(::exp2f);
STALIN_USING_IF_EXISTS(::exp2l);

STALIN_USING_IF_EXISTS(::expm1);
STALIN_USING_IF_EXISTS(::expm1f);
STALIN_USING_IF_EXISTS(::expm1l);

STALIN_USING_IF_EXISTS(::expm1);
STALIN_USING_IF_EXISTS(::expm1f);
STALIN_USING_IF_EXISTS(::expm1l);

STALIN_USING_IF_EXISTS(::log10);
STALIN_USING_IF_EXISTS(::log10f);
STALIN_USING_IF_EXISTS(::log10l);

STALIN_USING_IF_EXISTS(::log2);
STALIN_USING_IF_EXISTS(::log2f);
STALIN_USING_IF_EXISTS(::log2l);

STALIN_USING_IF_EXISTS(::log1p);
STALIN_USING_IF_EXISTS(::log1pf);
STALIN_USING_IF_EXISTS(::log1pl);

STALIN_USING_IF_EXISTS(::pow);
STALIN_USING_IF_EXISTS(::powf);
STALIN_USING_IF_EXISTS(::powl);

STALIN_USING_IF_EXISTS(::sqrt);
STALIN_USING_IF_EXISTS(::sqrtf);
STALIN_USING_IF_EXISTS(::sqrtl);

STALIN_USING_IF_EXISTS(::cbrt);
STALIN_USING_IF_EXISTS(::cbrtf);
STALIN_USING_IF_EXISTS(::cbrtl);

STALIN_USING_IF_EXISTS(::hypot);
STALIN_USING_IF_EXISTS(::hypotf);
STALIN_USING_IF_EXISTS(::hypotl);

STALIN_USING_IF_EXISTS(::sin);
STALIN_USING_IF_EXISTS(::sinf);
STALIN_USING_IF_EXISTS(::sinl);

STALIN_USING_IF_EXISTS(::cos);
STALIN_USING_IF_EXISTS(::cosf);
STALIN_USING_IF_EXISTS(::cosl);

STALIN_USING_IF_EXISTS(::tan);
STALIN_USING_IF_EXISTS(::tanf);
STALIN_USING_IF_EXISTS(::tanl);

STALIN_USING_IF_EXISTS(::asin);
STALIN_USING_IF_EXISTS(::asinf);
STALIN_USING_IF_EXISTS(::asinl);

STALIN_USING_IF_EXISTS(::acos);
STALIN_USING_IF_EXISTS(::acosf);
STALIN_USING_IF_EXISTS(::acosl);

STALIN_USING_IF_EXISTS(::atan);
STALIN_USING_IF_EXISTS(::atanf);
STALIN_USING_IF_EXISTS(::atanl);

STALIN_USING_IF_EXISTS(::atan2);
STALIN_USING_IF_EXISTS(::atan2f);
STALIN_USING_IF_EXISTS(::atan2l);

STALIN_USING_IF_EXISTS(::sinh);
STALIN_USING_IF_EXISTS(::sinhf);
STALIN_USING_IF_EXISTS(::sinhl);

STALIN_USING_IF_EXISTS(::cosh);
STALIN_USING_IF_EXISTS(::coshf);
STALIN_USING_IF_EXISTS(::coshl);

STALIN_USING_IF_EXISTS(::tanh);
STALIN_USING_IF_EXISTS(::tanhf);
STALIN_USING_IF_EXISTS(::tanhl);

STALIN_USING_IF_EXISTS(::asinh);
STALIN_USING_IF_EXISTS(::asinhf);
STALIN_USING_IF_EXISTS(::asinhl);

STALIN_USING_IF_EXISTS(::acosh);
STALIN_USING_IF_EXISTS(::acoshf);
STALIN_USING_IF_EXISTS(::acoshl);

STALIN_USING_IF_EXISTS(::atanh);
STALIN_USING_IF_EXISTS(::atanhf);
STALIN_USING_IF_EXISTS(::atanhl);

STALIN_USING_IF_EXISTS(::erf);
STALIN_USING_IF_EXISTS(::erff);
STALIN_USING_IF_EXISTS(::erfl);

STALIN_USING_IF_EXISTS(::erfc);
STALIN_USING_IF_EXISTS(::erfcf);
STALIN_USING_IF_EXISTS(::erfcl);

STALIN_USING_IF_EXISTS(::tgamma);
STALIN_USING_IF_EXISTS(::tgammaf);
STALIN_USING_IF_EXISTS(::tgammal);

STALIN_USING_IF_EXISTS(::lgamma);
STALIN_USING_IF_EXISTS(::lgammaf);
STALIN_USING_IF_EXISTS(::lgammal);

STALIN_USING_IF_EXISTS(::ceil);
STALIN_USING_IF_EXISTS(::ceilf);
STALIN_USING_IF_EXISTS(::ceill);

STALIN_USING_IF_EXISTS(::floor);
STALIN_USING_IF_EXISTS(::floorf);
STALIN_USING_IF_EXISTS(::floorl);

STALIN_USING_IF_EXISTS(::trunc);
STALIN_USING_IF_EXISTS(::truncf);
STALIN_USING_IF_EXISTS(::truncl);

STALIN_USING_IF_EXISTS(::round);
STALIN_USING_IF_EXISTS(::roundf);
STALIN_USING_IF_EXISTS(::roundl);
STALIN_USING_IF_EXISTS(::lround);
STALIN_USING_IF_EXISTS(::lroundf);
STALIN_USING_IF_EXISTS(::lroundl);
STALIN_USING_IF_EXISTS(::llround);
STALIN_USING_IF_EXISTS(::llroundf);
STALIN_USING_IF_EXISTS(::llroundl);

STALIN_USING_IF_EXISTS(::nearbyint);
STALIN_USING_IF_EXISTS(::nearbyintf);
STALIN_USING_IF_EXISTS(::nearbyintl);

STALIN_USING_IF_EXISTS(::rint);
STALIN_USING_IF_EXISTS(::rintf);
STALIN_USING_IF_EXISTS(::rintl);
STALIN_USING_IF_EXISTS(::lrint);
STALIN_USING_IF_EXISTS(::lrintf);
STALIN_USING_IF_EXISTS(::lrintl);
STALIN_USING_IF_EXISTS(::llrint);
STALIN_USING_IF_EXISTS(::llrintf);
STALIN_USING_IF_EXISTS(::llrintl);

STALIN_USING_IF_EXISTS(::frexp);
STALIN_USING_IF_EXISTS(::frexpf);
STALIN_USING_IF_EXISTS(::frexpl);

STALIN_USING_IF_EXISTS(::ldexp);
STALIN_USING_IF_EXISTS(::ldexpf);
STALIN_USING_IF_EXISTS(::ldexpl);

STALIN_USING_IF_EXISTS(::modf);
STALIN_USING_IF_EXISTS(::modff);
STALIN_USING_IF_EXISTS(::modfl);

STALIN_USING_IF_EXISTS(::scalbn);
STALIN_USING_IF_EXISTS(::scalbnf);
STALIN_USING_IF_EXISTS(::scalbnl);
STALIN_USING_IF_EXISTS(::scalbln);
STALIN_USING_IF_EXISTS(::scalblnf);
STALIN_USING_IF_EXISTS(::scalblnl);

STALIN_USING_IF_EXISTS(::ilogb);
STALIN_USING_IF_EXISTS(::ilogbf);
STALIN_USING_IF_EXISTS(::ilogbl);

STALIN_USING_IF_EXISTS(::logb);
STALIN_USING_IF_EXISTS(::logbf);
STALIN_USING_IF_EXISTS(::logbl);

STALIN_USING_IF_EXISTS(::nextafter);
STALIN_USING_IF_EXISTS(::nextafterf);
STALIN_USING_IF_EXISTS(::nextafterl);
STALIN_USING_IF_EXISTS(::nexttoward);
STALIN_USING_IF_EXISTS(::nexttowardf);
STALIN_USING_IF_EXISTS(::nexttowardl);

STALIN_USING_IF_EXISTS(::copysign);
STALIN_USING_IF_EXISTS(::copysignf);
STALIN_USING_IF_EXISTS(::copysignl);

#ifdef STALIN_CXX_STD_SINCE_20
STALIN_NONSTRICT_MAYBE_UNUSED constexpr float lerp(float a, float b, float t) noexcept { return a + t * (b - a); }
STALIN_NONSTRICT_MAYBE_UNUSED constexpr double lerp(double a, double b, double t) noexcept { return a + t * (b - a); }
STALIN_NONSTRICT_MAYBE_UNUSED constexpr long double lerp(long double a, long double b, long double t) noexcept { return a + t * (b - a); }

template <class Promoted, class Arithmetic1, class Arithmetic2, class Arithmetic3>
constexpr Promoted lerp(Arithmetic1 a, Arithmetic2 b, Arithmetic3 t) noexcept {
    return a + t * (b - a);
}

template <class Promoted, class Arithmetic1, class Arithmetic2, class Arithmetic3>
STALIN_NONSTRICT_MAYBE_UNUSED constexpr typename std::enable_if<
    (std::is_integral<Arithmetic1>::value || std::is_integral<Arithmetic2>::value || std::is_integral<Arithmetic3>::value)
        && (std::is_same<Arithmetic1, long double>::value || std::is_same<Arithmetic2, long double>::value
            || std::is_same<Arithmetic3, long double>::value), long double> lerp(Arithmetic1 a, Arithmetic2 b, Arithmetic3 t) noexcept {
    if constexpr (std::is_integral<Arithmetic1>::value) {
        if constexpr (std::is_integral<Arithmetic2>::value) {
            // Arithmetic3 can't be integral
            return (double) a + t * ((double) b - (double) a);
        } else if constexpr (std::is_integral<Arithmetic3>::value) {
            // Arithmetic2 can't be integral
            return (double) a + (double) t * (b - (double) a);
        } else {
            return (double) a + t * (b - (double) a);
        }
    } else if constexpr (std::is_integral<Arithmetic2>::value) {
        if constexpr (std::is_integral<Arithmetic3>::value) {
            return a + (double) t * ((double) b - (double) a);
        } else {
            return a + t * ((double) b - a);
        }
    } else if constexpr (std::is_integral<Arithmetic3>::value) {
        return a + (double) t * (b - a);
    }
    // Unreachable
}

template <class Promoted, class Arithmetic1, class Arithmetic2, class Arithmetic3>
STALIN_NONSTRICT_MAYBE_UNUSED constexpr typename std::enable_if<
    (std::is_integral<Arithmetic1>::value || std::is_integral<Arithmetic2>::value || std::is_integral<Arithmetic3>::value)
        && !(std::is_same<Arithmetic1, long double>::value || std::is_same<Arithmetic2, long double>::value
            || std::is_same<Arithmetic3, long double>::value), double> lerp(Arithmetic1 a, Arithmetic2 b, Arithmetic3 t) noexcept {
    if constexpr (std::is_integral<Arithmetic1>::value) {
        if constexpr (std::is_integral<Arithmetic2>::value) {
            // Arithmetic3 can't be integral
            return (double) a + t * ((double) b - (double) a);
        } else if constexpr (std::is_integral<Arithmetic3>::value) {
            // Arithmetic2 can't be integral
            return (double) a + (double) t * (b - (double) a);
        } else {
            return (double) a + t * (b - (double) a);
        }
    } else if constexpr (std::is_integral<Arithmetic2>::value) {
        if constexpr (std::is_integral<Arithmetic3>::value) {
            return a + (double) t * ((double) b - (double) a);
        } else {
            return a + t * ((double) b - a);
        }
    } else if constexpr (std::is_integral<Arithmetic3>::value) {
        return a + (double) t * (b - a);
    }
    // Unreachable
}
#endif
}

#endif // ifndef STALIN_CXX_STD_FREESTANDING

#endif //CPP_STALIN_INCLUDE_CMATH__
