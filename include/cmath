// cpp-stalin (c) Nikolas Wipper 2021

/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/. */

#ifndef CPP_STALIN_INCLUDE_CMATH__
#define CPP_STALIN_INCLUDE_CMATH__

#include "__config"
#ifndef STALIN_CXX_STD_FREESTANDING

#include <math.h>
#include "numbers"
#include "type_traits"

namespace std {

typedef float float_t;
typedef double double_t;

//using ::abs;
using ::fabs;
using ::fabsf;
using ::fabsl;

using ::fmod;
using ::fmodf;
using ::fmodl;

using ::remainder;
using ::remainderf;
using ::remainderl;

using ::remquo;
using ::remquof;
using ::remquol;

using ::fma;
using ::fmaf;
using ::fmal;

using ::fmax;
using ::fmaxf;
using ::fmaxl;

using ::fmin;
using ::fminf;
using ::fminl;

using ::fdim;
using ::fdimf;
using ::fdiml;

using ::nan;
using ::nanf;
using ::nanl;

using ::exp;
using ::expf;
using ::expl;

using ::exp2;
using ::exp2f;
using ::exp2l;

using ::expm1;
using ::expm1f;
using ::expm1l;

using ::expm1;
using ::expm1f;
using ::expm1l;

using ::log10;
using ::log10f;
using ::log10l;

using ::log2;
using ::log2f;
using ::log2l;

using ::log1p;
using ::log1pf;
using ::log1pl;

using ::pow;
using ::powf;
using ::powl;

using ::sqrt;
using ::sqrtf;
using ::sqrtl;

using ::cbrt;
using ::cbrtf;
using ::cbrtl;

using ::hypot;
using ::hypotf;
using ::hypotl;

using ::sin;
using ::sinf;
using ::sinl;

using ::cos;
using ::cosf;
using ::cosl;

using ::tan;
using ::tanf;
using ::tanl;

using ::asin;
using ::asinf;
using ::asinl;

using ::acos;
using ::acosf;
using ::acosl;

using ::atan;
using ::atanf;
using ::atanl;

using ::atan2;
using ::atan2f;
using ::atan2l;

using ::sinh;
using ::sinhf;
using ::sinhl;

using ::cosh;
using ::coshf;
using ::coshl;

using ::tanh;
using ::tanhf;
using ::tanhl;

using ::asinh;
using ::asinhf;
using ::asinhl;

using ::acosh;
using ::acoshf;
using ::acoshl;

using ::atanh;
using ::atanhf;
using ::atanhl;

using ::erf;
using ::erff;
using ::erfl;

using ::erfc;
using ::erfcf;
using ::erfcl;

using ::tgamma;
using ::tgammaf;
using ::tgammal;

using ::lgamma;
using ::lgammaf;
using ::lgammal;

using ::ceil;
using ::ceilf;
using ::ceill;

using ::floor;
using ::floorf;
using ::floorl;

using ::trunc;
using ::truncf;
using ::truncl;

using ::round;
using ::roundf;
using ::roundl;
using ::lround;
using ::lroundf;
using ::lroundl;
using ::llround;
using ::llroundf;
using ::llroundl;

using ::nearbyint;
using ::nearbyintf;
using ::nearbyintl;

using ::rint;
using ::rintf;
using ::rintl;
using ::lrint;
using ::lrintf;
using ::lrintl;
using ::llrint;
using ::llrintf;
using ::llrintl;

using ::frexp;
using ::frexpf;
using ::frexpl;

using ::ldexp;
using ::ldexpf;
using ::ldexpl;

using ::modf;
using ::modff;
using ::modfl;

using ::scalbn;
using ::scalbnf;
using ::scalbnl;
using ::scalbln;
using ::scalblnf;
using ::scalblnl;

using ::ilogb;
using ::ilogbf;
using ::ilogbl;

using ::logb;
using ::logbf;
using ::logbl;

using ::nextafter;
using ::nextafterf;
using ::nextafterl;
using ::nexttoward;
using ::nexttowardf;
using ::nexttowardl;

using ::copysign;
using ::copysignf;
using ::copysignl;

template <class T, class U>
// fixme: A bug in clang prevents this function from being usable with consteval
//  Specifically, the bug is related to sizeof which clang thinks is invalid in
//  a consteval block. GCC doesn't and the standard doesn't mention it apart from
//  sizeof being a constant expression
/*STALIN_MOST_CONST*/
constexpr long long int __stalin_const_pow(T base, U exp) {
    if (base == 0 || base == 1) return base;
    long long int res = base;
    for (U i = 1; i < exp; i++) res *= base;
    return res;
}

template <class T>
STALIN_MOST_CONST long double __stalin_const_taylor_step(T x, size_t it) {
    return (long double) __stalin_const_pow(x - 1, it) / (long double) it;
}

template <class T>
STALIN_MOST_CONST long double __stalin_const_ln(T x) {
    long double res = x - 1;
    constexpr size_t iterations = 10;
    for (size_t i = 2; i < iterations; i++) res -= __stalin_const_taylor_step(x, i);
    return res;
}

template <class T>
STALIN_MOST_CONST long double __stalin_const_log10(T x) {
    return __stalin_const_ln(x) / M_LN10;
}

#ifdef STALIN_CXX_STD_SINCE_20
STALIN_NONSTRICT_MAYBE_UNUSED constexpr float lerp(float a, float b, float t) noexcept { return a + t * (b - a); }
STALIN_NONSTRICT_MAYBE_UNUSED constexpr double lerp(double a, double b, double t) noexcept { return a + t * (b - a); }
STALIN_NONSTRICT_MAYBE_UNUSED constexpr long double lerp(long double a, long double b, long double t) noexcept { return a + t * (b - a); }

template <class Promoted, class Arithmetic1, class Arithmetic2, class Arithmetic3>
constexpr Promoted lerp(Arithmetic1 a, Arithmetic2 b, Arithmetic3 t) noexcept {
    return a + t * (b - a);
}

template <class Promoted, class Arithmetic1, class Arithmetic2, class Arithmetic3>
STALIN_NONSTRICT_MAYBE_UNUSED constexpr typename std::enable_if<
    (std::is_integral<Arithmetic1>::value || std::is_integral<Arithmetic2>::value || std::is_integral<Arithmetic3>::value)
        && (std::is_same<Arithmetic1, long double>::value || std::is_same<Arithmetic2, long double>::value
            || std::is_same<Arithmetic3, long double>::value), long double> lerp(Arithmetic1 a, Arithmetic2 b, Arithmetic3 t) noexcept {
    if constexpr (std::is_integral<Arithmetic1>::value) {
        if constexpr (std::is_integral<Arithmetic2>::value) {
            // Arithmetic3 can't be integral
            return (double) a + t * ((double) b - (double) a);
        } else if constexpr (std::is_integral<Arithmetic3>::value) {
            // Arithmetic2 can't be integral
            return (double) a + (double) t * (b - (double) a);
        } else {
            return (double) a + t * (b - (double) a);
        }
    } else if constexpr (std::is_integral<Arithmetic2>::value) {
        if constexpr (std::is_integral<Arithmetic3>::value) {
            return a + (double) t * ((double) b - (double) a);
        } else {
            return a + t * ((double) b - a);
        }
    } else if constexpr (std::is_integral<Arithmetic3>::value) {
        return a + (double) t * (b - a);
    }
    // Unreachable
}

template <class Promoted, class Arithmetic1, class Arithmetic2, class Arithmetic3>
STALIN_NONSTRICT_MAYBE_UNUSED constexpr typename std::enable_if<
    (std::is_integral<Arithmetic1>::value || std::is_integral<Arithmetic2>::value || std::is_integral<Arithmetic3>::value)
        && !(std::is_same<Arithmetic1, long double>::value || std::is_same<Arithmetic2, long double>::value
            || std::is_same<Arithmetic3, long double>::value), double> lerp(Arithmetic1 a, Arithmetic2 b, Arithmetic3 t) noexcept {
    if constexpr (std::is_integral<Arithmetic1>::value) {
        if constexpr (std::is_integral<Arithmetic2>::value) {
            // Arithmetic3 can't be integral
            return (double) a + t * ((double) b - (double) a);
        } else if constexpr (std::is_integral<Arithmetic3>::value) {
            // Arithmetic2 can't be integral
            return (double) a + (double) t * (b - (double) a);
        } else {
            return (double) a + t * (b - (double) a);
        }
    } else if constexpr (std::is_integral<Arithmetic2>::value) {
        if constexpr (std::is_integral<Arithmetic3>::value) {
            return a + (double) t * ((double) b - (double) a);
        } else {
            return a + t * ((double) b - a);
        }
    } else if constexpr (std::is_integral<Arithmetic3>::value) {
        return a + (double) t * (b - a);
    }
    // Unreachable
}
#endif
}

#endif // ifndef STALIN_CXX_STD_FREESTANDING

#endif //CPP_STALIN_INCLUDE_CMATH__
