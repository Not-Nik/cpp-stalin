// cpp-stalin (c) Nikolas Wipper 2021

/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/. */

#ifndef CPP_STALIN_INCLUDE___MATH__
#define CPP_STALIN_INCLUDE___MATH__

#include "type_traits"

namespace std {
template <class T = size_t>
constexpr T __stalin_const_pow(T base, T exp) {
    if (base == 0 || base == 1) return base;
    T res = base;
    for (T i = 1; i < exp; i++) res *= base;
    return res;
}

template <class T>
constexpr long double __stalin_const_ln(T x) {
    if (x <= 0) return 0;
    T res = 0;
    T exp = 1;
    for (T i = 0; i < 10; i++) {
        res += (1.0 / (double) exp) * __stalin_const_pow<T>((x - 1) / (x + 1), exp);
        exp += 2;
    }
    return 2 * res;
}

#ifndef M_LN10
#define M_LN10 2.3025850929940456840179914546843642076011014886287729760333279009
#endif

#ifndef M_LN2
#define M_LN2 0.6931471805599453094172321214581765680755001343602552541206800094
#endif

template <class T>
constexpr long double __stalin_const_log10(T x) {
    return __stalin_const_ln(x) / M_LN10;
}

template <class T>
constexpr long double __stalin_const_log2(T x) {
    return __stalin_const_ln(x) / M_LN2;
}
}

#endif //CPP_STALIN_INCLUDE___MATH__
