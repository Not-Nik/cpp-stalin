// cpp-stalin (c) Nikolas Wipper 2021

/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/. */

#ifndef CPP_STALIN_INCLUDE_NUMBERS__
#define CPP_STALIN_INCLUDE_NUMBERS__

#include "__config"
#ifndef STALIN_CXX_STD_FREESTANDING

#include "concepts"

namespace std {
#ifdef STALIN_CXX_STD_SINCE_20
template <class T> inline constexpr T e_v;
template <class T> inline constexpr T log2e_v;
template <class T> inline constexpr T log10e_v;
template <class T> inline constexpr T pi_v;
template <class T> inline constexpr T inv_pi_v;
template <class T> inline constexpr T inv_sqrtpi_v;
template <class T> inline constexpr T ln2_v;
template <class T> inline constexpr T ln10_v;
template <class T> inline constexpr T sqrt2_v;
template <class T> inline constexpr T sqrt3_v;
template <class T> inline constexpr T inv_sqrt3_v;
template <class T> inline constexpr T egamma_v;
template <class T> inline constexpr T phi_v;

template <floating_point T> inline constexpr T e_v<T>          = 2.7182818284590452353602874713526624977572470936999595749669676277;
template <floating_point T> inline constexpr T log2e_v<T>      = 1.4426950408889634073599246810018921374266459541529859341354494069;
template <floating_point T> inline constexpr T log10e_v<T>     = 0.4342944819032518276511289189166050822943970058036665661144537831;
template <floating_point T> inline constexpr T pi_v<T>         = 3.1415926535897932384626433832795028841971693993751058209749445923;
template <floating_point T> inline constexpr T inv_pi_v<T>     = 0.3183098861837906715377675267450287240689192914809128974953346881;
template <floating_point T> inline constexpr T inv_sqrtpi_v<T> = 0.5641895835477562869480794515607725858440506293289988568440857217;
template <floating_point T> inline constexpr T ln2_v<T>        = 0.6931471805599453094172321214581765680755001343602552541206800094;
template <floating_point T> inline constexpr T ln10_v<T>       = 2.3025850929940456840179914546843642076011014886287729760333279009;
template <floating_point T> inline constexpr T sqrt2_v<T>      = 1.4142135623730950488016887242096980785696718753769480731766797379;
template <floating_point T> inline constexpr T sqrt3_v<T>      = 1.7320508075688772935274463415058723669428052538103806280558069794;
template <floating_point T> inline constexpr T inv_sqrt3_v<T>  = 0.5773502691896257645091487805019574556476017512701268760186023264;
template <floating_point T> inline constexpr T egamma_v<T>     = 0.5772156649015328606065120900824024310421593359399235988057672348;
template <floating_point T> inline constexpr T phi_v<T>        = 1.6180339887498948482045868343656381177203091798057628621354486227;

inline constexpr double e          = e_v<double>;
inline constexpr double log2e      = log2e_v<double>;
inline constexpr double log10e     = log10e_v<double>;
inline constexpr double pi         = pi_v<double>;
inline constexpr double inv_pi     = inv_pi_v<double>;
inline constexpr double inv_sqrtpi = inv_sqrtpi_v<double>;
inline constexpr double ln2        = ln2_v<double>;
inline constexpr double ln10       = ln10_v<double>;
inline constexpr double sqrt2      = sqrt2_v<double>;
inline constexpr double sqrt3      = sqrt3_v<double>;
inline constexpr double inv_sqrt3  = inv_sqrt3_v<double>;
inline constexpr double egamma     = egamma_v<double>;
inline constexpr double phi        = phi_v<double>;
#endif
}

#endif // ifndef STALIN_CXX_STD_FREESTANDING

#endif //CPP_STALIN_INCLUDE_NUMBERS__
