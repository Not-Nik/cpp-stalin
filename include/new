// cpp-stalin (c) Nikolas Wipper 2021

/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/. */

#ifndef CPP_STALIN_INCLUDE_NEW__
#define CPP_STALIN_INCLUDE_NEW__

#include "cstdlib"
#include "cstddef"
#include "__config"
#include "__memory"
#include "exception"

namespace std {
#ifdef STALIN_CXX_STD_SINCE_20

struct destroying_delete_t { explicit destroying_delete_t() = default; };

inline constexpr destroying_delete_t destroying_delete{};
#endif

#ifdef STALIN_CXX_STD_SINCE_17
enum class align_val_t : std::size_t {};

inline constexpr std::size_t hardware_destructive_interference_size = alignof(std::max_align_t);
inline constexpr std::size_t hardware_constructive_interference_size = alignof(std::max_align_t);
#endif

struct nothrow_t { explicit nothrow_t() = default; };

extern const std::nothrow_t nothrow;

class bad_alloc : public exception {
public:
    bad_alloc() { what_ = "bad allocation"; }
};

class bad_array_new_length : public bad_alloc {
public:
    bad_array_new_length() { what_ = "bad array new length"; }
};

typedef void (*new_handler)();

std::new_handler get_new_handler() noexcept;
std::new_handler set_new_handler(std::new_handler new_p) noexcept;

template <class T>
STALIN_NODISCARD_SINCE_20 constexpr T *launder(T *p) noexcept { return p; }

void *__aligned_alloc(size_t count, size_t al) noexcept;

void __aligned_free(void *p);

#ifdef STALIN_CXX_STD_SINCE_17
void *__new_impl(size_t count, align_val_t al = (align_val_t) __STDCPP_DEFAULT_NEW_ALIGNMENT__) noexcept;
#else
void *__new_impl(size_t count) noexcept;
#endif
}

STALIN_NODISCARD_SINCE_20 void *operator new(std::size_t count);
STALIN_NODISCARD_SINCE_20 void *operator new[](std::size_t count);

STALIN_NODISCARD_SINCE_20 void *operator new(std::size_t count, const std::nothrow_t &tag) noexcept;
STALIN_NODISCARD_SINCE_20 void *operator new[](std::size_t count, const std::nothrow_t &tag) noexcept;

STALIN_NODISCARD_SINCE_20 void *operator new(std::size_t count, void *ptr) noexcept;
STALIN_NODISCARD_SINCE_20 void *operator new[](std::size_t count, void *ptr) noexcept;

#ifdef STALIN_CXX_STD_SINCE_17
[[nodiscard]] void *operator new(std::size_t count, std::align_val_t al);
[[nodiscard]] void *operator new[](std::size_t count, std::align_val_t al);

[[nodiscard]] void *operator new(std::size_t count, std::align_val_t al, const std::nothrow_t &) noexcept;
[[nodiscard]] void *operator new[](std::size_t count, std::align_val_t al, const std::nothrow_t &) noexcept;
#endif

void operator delete(void *ptr) noexcept;
void operator delete[](void *ptr) noexcept;

void operator delete(void *ptr, const std::nothrow_t &tag) noexcept;
void operator delete[](void *ptr, const std::nothrow_t &tag) noexcept;

void operator delete(void *ptr, void *place) noexcept;
void operator delete[](void *ptr, void *place) noexcept;

#ifdef STALIN_CXX_STD_SINCE_14
void operator delete(void *ptr, std::size_t sz) noexcept;
void operator delete[](void *ptr, std::size_t sz) noexcept;
#endif

#ifdef STALIN_CXX_STD_SINCE_17
void operator delete(void *ptr, std::align_val_t al) noexcept;
void operator delete[](void *ptr, std::align_val_t al) noexcept;

void operator delete(void *ptr, std::size_t sz, std::align_val_t al) noexcept;
void operator delete[](void *ptr, std::size_t sz, std::align_val_t al) noexcept;

void operator delete(void *ptr, std::align_val_t al, const std::nothrow_t &tag) noexcept;
void operator delete[](void *ptr, std::align_val_t al, const std::nothrow_t &tag) noexcept;
#endif

#endif //CPP_STALIN_INCLUDE_NEW__
