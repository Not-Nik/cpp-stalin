// cpp-stalin (c) Nikolas Wipper 2021

/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/. */

#ifndef CPP_STALIN_INCLUDE_TYPETRAITS_H_
#define CPP_STALIN_INCLUDE_TYPETRAITS_H_

#include "cstddef"
#include "cstdint"
#include "cstring"
#include "typeinfo"
#include "__config"
#include "__declval"

namespace std {

template <class T, T v>
struct integral_constant {
    static constexpr T value = v;
    using value_type = T;
    using type = integral_constant; // using injected-class-name
    constexpr operator value_type() const noexcept { return value; }
    #ifdef STALIN_CXX_STD_SINCE_14
    constexpr value_type operator()() const noexcept { return value; } // since c++14
    #endif
};

template <bool B> using __stalin__bool_constant = integral_constant<bool, B>;
#ifdef STALIN_CXX_STD_SINCE_17
template <bool B> using bool_constant = integral_constant<bool, B>;
#endif

using true_type = __stalin__bool_constant<true>;
using false_type = __stalin__bool_constant<false>;

template <class T, class U> struct is_same : std::false_type {};

template <class T> struct is_same<T, T> : std::true_type {};

template <class T> struct remove_cv { typedef T type; };
template <class T> struct remove_cv<const T> { typedef T type; };
template <class T> struct remove_cv<volatile T> { typedef T type; };
template <class T> struct remove_cv<const volatile T> { typedef T type; };

template <class T> struct remove_const { typedef T type; };
template <class T> struct remove_const<const T> { typedef T type; };

template <class T> struct remove_volatile { typedef T type; };
template <class T> struct remove_volatile<volatile T> { typedef T type; };

template <class T> struct is_void : std::is_same<void, typename std::remove_cv<T>::type> {};

template <class T> struct __stalin_is_integral_helper : false_type {};
template <> struct __stalin_is_integral_helper<bool> : true_type {};
template <> struct __stalin_is_integral_helper<char> : true_type {};
#ifdef STALIN_CXX_STD_SINCE_20
template <> struct __stalin_is_integral_helper<char8_t> : true_type {};
#endif
template <> struct __stalin_is_integral_helper<char16_t> : true_type {};
template <> struct __stalin_is_integral_helper<char32_t> : true_type {};
template <> struct __stalin_is_integral_helper<wchar_t> : true_type {};
template <> struct __stalin_is_integral_helper<short> : true_type {};
template <> struct __stalin_is_integral_helper<int> : true_type {};
template <> struct __stalin_is_integral_helper<long> : true_type {};
template <> struct __stalin_is_integral_helper<long long> : true_type {};

template <class T> struct is_integral : __stalin_is_integral_helper<typename remove_cv<T>::type> {};

template <class T> struct __stalin_is_floating_point_helper : false_type {};
template <> struct __stalin_is_floating_point_helper<float> : true_type {};
template <> struct __stalin_is_floating_point_helper<double> : true_type {};
template <> struct __stalin_is_floating_point_helper<long double> : true_type {};

template <class T> struct is_floating_point : __stalin_is_floating_point_helper<typename remove_cv<T>::type> {};

template <class T> struct is_array : std::false_type {};

template <class T> struct is_array<T[]> : std::true_type {};

template <class T, std::size_t N> struct is_array<T[N]> : std::true_type {};

template <class T> struct is_const : std::false_type {};
template <class T> struct is_const<const T> : std::true_type {};

template <class T> struct is_reference : std::false_type {};
template <class T> struct is_reference<T &> : std::true_type {};
template <class T> struct is_reference<T &&> : std::true_type {};

template <class T> struct is_function : std::integral_constant<bool, !std::is_const<const T>::value && !std::is_reference<T>::value> {};

template <class T> struct is_pointer_helper : std::false_type {};
template <class T> struct is_pointer_helper<T *> : std::true_type {};
template <class T> struct is_pointer : is_pointer_helper<typename std::remove_cv<T>::type> {};

template <class T> struct is_lvalue_reference : std::false_type {};
template <class T> struct is_lvalue_reference<T &> : std::true_type {};

template <class T> struct is_rvalue_reference : std::false_type {};
template <class T> struct is_rvalue_reference<T &&> : std::true_type {};

template <class T> struct is_member_pointer_helper : std::false_type {};
template <class T, class U> struct is_member_pointer_helper<T U::*> : std::true_type {};
template <class T> struct is_member_pointer : is_member_pointer_helper<typename std::remove_cv<T>::type> {};

template <class T> struct is_member_function_pointer_helper : std::false_type {};
template <class T, class U> struct is_member_function_pointer_helper<T U::*> : std::is_function<T> {};
template <class T> struct is_member_function_pointer : is_member_function_pointer_helper<typename std::remove_cv<T>::type> {};

template <class T>
struct is_member_object_pointer : std::integral_constant<bool, std::is_member_pointer<T>::value && !std::is_member_function_pointer<T>::value> {};

template <class T, typename = void> struct __stalin_is_union_or_class_helper : std::false_type {};
template <class T> struct __stalin_is_union_or_class_helper<T, decltype((char T::*) {}, void())> : public std::true_type {};

template <class T> struct __stalin_is_union_or_class : __stalin_is_union_or_class_helper<T> {};

template <class T>
struct is_enum : public integral_constant<bool,
                                          !is_void<T>::value && !is_integral<T>::value && !is_floating_point<T>::value && !is_array<T>::value
                                              && !is_pointer<T>::value && !is_reference<T>::value && !is_member_pointer<T>::value
                                              && !__stalin_is_union_or_class<T>::value && !is_function<T>::value> {
};

#include "__llvm/type_traits.h"

namespace detail {
template <class T>
std::integral_constant<bool, !std::is_union<T>::value> test(int T::*);

template <class>
std::false_type test(...);
}

template <class T> struct is_class : decltype(detail::test<T>(nullptr)) {};

template <class T> struct is_arithmetic : std::integral_constant<bool, std::is_integral<T>::value || std::is_floating_point<T>::value> {};

template <class T>
struct is_fundamental : std::integral_constant<bool,
                                               std::is_arithmetic<T>::value || std::is_void<T>::value
                                                   || std::is_same<std::nullptr_t, typename std::remove_cv<T>::type>::value> {
};

template <class T>
struct is_scalar : std::integral_constant<bool,
                                          std::is_arithmetic<T>::value || std::is_enum<T>::value || std::is_pointer<T>::value
                                              || std::is_member_pointer<T>::value
                                              || std::is_same<std::nullptr_t, typename std::remove_cv<T>::type>::value> {
};

template <class T>
struct is_object : std::integral_constant<bool,
                                          std::is_scalar<T>::value || std::is_array<T>::value || std::is_union<T>::value || std::is_class<T>::value> {
};

template <class T> struct is_compound : std::integral_constant<bool, !std::is_fundamental<T>::value> {};

template <class T> struct is_volatile : std::false_type {};
template <class T> struct is_volatile<volatile T> : std::true_type {};

template <class T> struct remove_all_extents { typedef T type; };
template <class T> struct remove_all_extents<T[]> { typedef typename remove_all_extents<T>::type type; };
template <class T, std::size_t N> struct remove_all_extents<T[N]> { typedef typename remove_all_extents<T>::type type; };

struct __stalin_has_constructor {
    template <class T, class ...Args, class = decltype(T(declval<Args>()...))>
    STALIN_NONSTRICT_NORETURN static true_type test(int) {}
    template <class, class...>
    STALIN_NONSTRICT_NORETURN static false_type test(...) {}

    template <class T, class... Args> using type = decltype(test<T, Args...>(0));
};

template <class T, class... Args> struct is_constructible : __stalin_has_constructor::type<T, Args...> {};

struct __stalin_has_nothrow_constructor {
    template <class T, class ...Args, class = decltype(T(declval<Args>()...))>
    STALIN_NONSTRICT_NORETURN static __stalin__bool_constant<noexcept(T(declval<Args>()...))> test(int) {}
    template <class, class...>
    STALIN_NONSTRICT_NORETURN static false_type test(...) {}

    template <class T, class... Args> using type = decltype(test<T, Args...>(0));
};

template <class T, class... Args> struct is_nothrow_constructible : __stalin_has_nothrow_constructor::type<T, Args...> {};

template <class T> struct is_default_constructible : std::is_constructible<T> {};

template <class T> struct is_trivially_default_constructible : std::is_trivially_constructible<T> {};

template <class T> struct is_nothrow_default_constructible : std::is_nothrow_constructible<T> {};

template <class T>
struct is_trivial : std::integral_constant<bool, std::is_trivially_copyable<T>::value && std::is_trivially_default_constructible<T>::value> {};

// Todo: template <class T> inline constexpr bool is_literal_type_v = is_literal_type<T>::value;

namespace detail {

template <class T>
std::true_type detect_is_polymorphic(decltype(dynamic_cast<const volatile void *>(static_cast<T *>(nullptr))));
template <class T>
std::false_type detect_is_polymorphic(...);
} // namespace detail

template <class T> struct is_polymorphic : decltype(detail::detect_is_polymorphic<T>(nullptr)) {};

// Todo: is_abstract

namespace detail {
template <typename T, bool = std::is_arithmetic<T>::value> struct is_signed : std::integral_constant<bool, T(-1) < T(0)> {};
template <typename T> struct is_signed<T, false> : std::false_type {};
} // namespace detail

template <typename T> struct is_signed : detail::is_signed<T>::type {};

namespace detail {
template <typename T, bool = std::is_arithmetic<T>::value> struct is_unsigned : std::integral_constant<bool, T(0) < T(-1)> {};
template <typename T> struct is_unsigned<T, false> : std::false_type {};
} // namespace detail

template <typename T> struct is_unsigned : detail::is_unsigned<T>::type {};

namespace detail {

template <class T> struct type_identity { using type = T; }; // or use std::type_identity (since C++20)

template <class T>
// Note that `cv void&` is a substitution failure
auto try_add_lvalue_reference(int) -> type_identity<T &>;
template <class T>
// Handle T = cv void case
auto try_add_lvalue_reference(...) -> type_identity<T>;

template <class T>
auto try_add_rvalue_reference(int) -> type_identity<T &&>;
template <class T>
auto try_add_rvalue_reference(...) -> type_identity<T>;
} // namespace detail

template <class T> struct add_cv { typedef const volatile T type; };

template <class T> struct add_const { typedef const T type; };

template <class T> struct add_volatile { typedef volatile T type; };

template <class T> struct add_lvalue_reference : decltype(detail::try_add_lvalue_reference<T>(0)) {};

template <class T> struct add_rvalue_reference : decltype(detail::try_add_rvalue_reference<T>(0)) {};

template <class T>
struct is_copy_constructible : std::is_constructible<T, typename std::add_lvalue_reference<typename std::add_const<T>::type>::type> {};

template <class T>
struct is_trivially_copy_constructible : std::is_trivially_constructible<T,
                                                                         typename std::add_lvalue_reference<typename std::add_const<T>::type>::type> {
};

template <class T>
struct is_nothrow_copy_constructible : std::is_nothrow_constructible<T, typename std::add_lvalue_reference<typename std::add_const<T>::type>::type> {
};

template <class T> struct is_move_constructible : std::is_constructible<T, typename std::add_rvalue_reference<T>::type> {};

template <class T> struct is_trivially_move_constructible : std::is_trivially_constructible<T, typename std::add_rvalue_reference<T>::type> {};

template <class T> struct is_nothrow_move_constructible : std::is_nothrow_constructible<T, typename std::add_rvalue_reference<T>::type> {};

struct __stalin_can_assign {
    template <class T, class U, class = decltype(&T::operator=(declval<U>()))>
    STALIN_NONSTRICT_NORETURN static true_type test(int) {}
    template <class, class...>
    STALIN_NONSTRICT_NORETURN static false_type test(...) {}

    template <class T, class U> using type = decltype(test<T, U>(0));
};

template <class T, class U> struct is_assignable : __stalin_can_assign::type<T, U> {};

struct __stalin_can_nothrow_assign {
    template <class T, class U, class = decltype(&T::operator=(declval<U>()))>
    STALIN_NONSTRICT_NORETURN static __stalin__bool_constant<noexcept(&T::operator=(declval<U>()))> test(int) {}
    template <class, class...>
    STALIN_NONSTRICT_NORETURN static false_type test(...) {}

    template <class T, class U> using type = decltype(test<T, U>(0));
};

template <class T, class U> struct is_nothrow_assignable : __stalin_can_nothrow_assign::type<T, U> {};

template <class T>
struct is_copy_assignable : std::is_assignable<typename std::add_lvalue_reference<T>::type, typename std::add_lvalue_reference<const T>::type> {};

template <class T>
struct is_trivially_copy_assignable : std::is_trivially_assignable<typename std::add_lvalue_reference<T>::type,
                                                                   typename std::add_lvalue_reference<const T>::type> {
};

template <class T>
struct is_nothrow_copy_assignable : std::is_nothrow_assignable<typename std::add_lvalue_reference<T>::type,
                                                               typename std::add_lvalue_reference<const T>::type> {
};

template <class T>
struct is_move_assignable : std::is_assignable<typename std::add_lvalue_reference<T>::type, typename std::add_rvalue_reference<T>::type> {};

template <class T>
struct is_trivially_move_assignable : std::is_trivially_assignable<typename std::add_lvalue_reference<T>::type,
                                                                   typename std::add_rvalue_reference<T>::type> {
};

template <class T>
struct is_nothrow_move_assignable : std::is_nothrow_assignable<typename std::add_lvalue_reference<T>::type,
                                                               typename std::add_rvalue_reference<T>::type> {
};

struct __stalin_has_destructor {
    template <class T, class = decltype(~T())>
    STALIN_NONSTRICT_NORETURN static true_type test(int) {}
    template <class, class...>
    STALIN_NONSTRICT_NORETURN static false_type test(...) {}

    template <class T, class... Args> using type = decltype(test<T, Args...>(0));
};

template <class T, class... Args> struct is_destructible : __stalin_has_destructor::type<T, Args...> {};

struct __stalin_has_nothrow_destructor {
    template <class T, class = decltype(~T())>
    STALIN_NONSTRICT_NORETURN static __stalin__bool_constant<noexcept(~T())> test(int) {}
    template <class, class...>
    STALIN_NONSTRICT_NORETURN static false_type test(...) {}

    template <class T, class... Args> using type = decltype(test<T, Args...>(0));
};

template <class T, class... Args> struct is_nothrow_destructible : __stalin_has_nothrow_destructor::type<T, Args...> {};

// Todo: std::is_swappable_with, std::is_swappable, std::is_nothrow_swappable_with, std::is_nothrow_swappable

template <class T> struct alignment_of : std::integral_constant<std::size_t, alignof(T)> {};

template <class T> struct rank : public std::integral_constant<std::size_t, 0> {};
template <class T> struct rank<T[]> : public std::integral_constant<std::size_t, rank<T>::value + 1> {};
template <class T, std::size_t N> struct rank<T[N]> : public std::integral_constant<std::size_t, rank<T>::value + 1> {};

template <class T, unsigned N = 0> struct extent : std::integral_constant<std::size_t, 0> {};
template <class T> struct extent<T[], 0> : std::integral_constant<std::size_t, 0> {};
template <class T, unsigned N> struct extent<T[], N> : std::extent<T, N - 1> {};
template <class T, std::size_t I> struct extent<T[I], 0> : std::integral_constant<std::size_t, I> {};
template <class T, std::size_t I, unsigned N> struct extent<T[I], N> : std::extent<T, N - 1> {};

namespace details {
template <typename B>
std::true_type test_pre_ptr_convertible(const volatile B *);
template <typename>
std::false_type test_pre_ptr_convertible(const volatile void *);

template <typename, typename>
auto test_pre_is_base_of(...) -> std::true_type;
template <typename B, typename D>
auto test_pre_is_base_of(int) -> decltype(test_pre_ptr_convertible<B>(static_cast<D *>(nullptr)));
}

template <typename Base, typename Derived>
struct is_base_of : std::integral_constant<bool,
                                           std::is_class<Base>::value && std::is_class<Derived>::value
                                               && decltype(details::test_pre_is_base_of<Base, Derived>(0))::value> {
};

namespace detail {

template <class T>
auto test_returnable(int) -> decltype(void(static_cast<T(*)()>(nullptr)), std::true_type{});
template <class>
auto test_returnable(...) -> std::false_type;

template <class From, class To>
auto test_implicitly_convertible(int) -> decltype(void(std::declval<void (&)(To)>()(std::declval<From>())), std::true_type{});
template <class, class>
auto test_implicitly_convertible(...) -> std::false_type;
} // namespace detail

template <class From, class To>
struct is_convertible : std::integral_constant<bool,
                                               (decltype(detail::test_returnable<To>(0))::value
                                                   && decltype(detail::test_implicitly_convertible<From, To>(0))::value)
                                                   || (std::is_void<From>::value && std::is_void<To>::value)> {
};

template <class T> struct remove_reference { typedef T type; };
template <class T> struct remove_reference<T &> { typedef T type; };
template <class T> struct remove_reference<T &&> { typedef T type; };

template <class T> struct remove_pointer { typedef T type; };
template <class T> struct remove_pointer<T *> { typedef T type; };
template <class T> struct remove_pointer<T *const> { typedef T type; };
template <class T> struct remove_pointer<T *volatile> { typedef T type; };
template <class T> struct remove_pointer<T *const volatile> { typedef T type; };

namespace detail {
// type_identity was previously defined

template <class T>
auto try_add_pointer(int) -> type_identity<typename std::remove_reference<T>::type *>;
template <class T>
auto try_add_pointer(...) -> type_identity<T>;
} // namespace detail

template <class T> struct add_pointer : decltype(detail::try_add_pointer<T>(0)) {};

template <class From, class To> struct __stalin_transfer_cv { typedef To type; };
template <class From, class To> struct __stalin_transfer_cv<const From, To> { typedef const To type; };
template <class From, class To> struct __stalin_transfer_cv<volatile From, To> { typedef volatile To type; };
template <class From, class To> struct __stalin_transfer_cv<const volatile From, To> { typedef const volatile To type; };

template <class T> struct __stalin_make_signed_helper;
template <> struct __stalin_make_signed_helper<char> { typedef signed char type; };
template <> struct __stalin_make_signed_helper<short> { typedef signed short type; };
template <> struct __stalin_make_signed_helper<int> { typedef signed int type; };
template <> struct __stalin_make_signed_helper<long> { typedef signed long type; };
template <> struct __stalin_make_signed_helper<long long> { typedef signed long type; };
template <> struct __stalin_make_signed_helper<unsigned char> { typedef signed char type; };
template <> struct __stalin_make_signed_helper<unsigned short> { typedef signed short type; };
template <> struct __stalin_make_signed_helper<unsigned int> { typedef signed int type; };
template <> struct __stalin_make_signed_helper<unsigned long> { typedef signed long type; };
template <> struct __stalin_make_signed_helper<unsigned long long> { typedef signed long long type; };
template <> struct __stalin_make_signed_helper<signed char> { typedef signed char type; };

template <class T> struct make_signed {
    typedef typename __stalin_transfer_cv<T, typename __stalin_make_signed_helper<std::remove_cv<T>>::type>::type type;
};

template <class T> struct __stalin_make_unsigned_helper;
template <> struct __stalin_make_unsigned_helper<char> { typedef unsigned char type; };
template <> struct __stalin_make_unsigned_helper<short> { typedef unsigned short type; };
template <> struct __stalin_make_unsigned_helper<int> { typedef unsigned int type; };
template <> struct __stalin_make_unsigned_helper<long> { typedef unsigned long type; };
template <> struct __stalin_make_unsigned_helper<long long> { typedef unsigned long type; };
template <> struct __stalin_make_unsigned_helper<unsigned char> { typedef unsigned char type; };
template <> struct __stalin_make_unsigned_helper<unsigned short> { typedef unsigned short type; };
template <> struct __stalin_make_unsigned_helper<unsigned int> { typedef unsigned int type; };
template <> struct __stalin_make_unsigned_helper<unsigned long> { typedef unsigned long type; };
template <> struct __stalin_make_unsigned_helper<unsigned long long> { typedef unsigned long long type; };
template <> struct __stalin_make_unsigned_helper<signed char> { typedef unsigned char type; };

template <class T> struct make_unsigned {
    typedef typename __stalin_transfer_cv<T, typename __stalin_make_unsigned_helper<std::remove_cv<T>>::type>::type type;
};

template <class T> struct remove_extent { typedef T type; };
template <class T> struct remove_extent<T[]> { typedef T type; };
template <class T, std::size_t N> struct remove_extent<T[N]> { typedef T type; };

template <std::size_t Len, std::size_t Align = __STDCPP_DEFAULT_NEW_ALIGNMENT__> struct aligned_storage {
    struct type { alignas(Align) unsigned char data[Len]; };
};

/* Todo: <algorithm>
template <std::size_t Len, class... Types>
struct aligned_union
{
    static constexpr std::size_t alignment_value = std::max({alignof(Types)...});

    struct type
    {
        alignas(alignment_value) char _s[std::max({Len, sizeof(Types)...})];
    };
};
*/

template <bool B, class T, class F> struct conditional { typedef T type; };
template <class T, class F> struct conditional<false, T, F> { typedef F type; };

template <class T> struct decay {
private:
    typedef typename std::remove_reference<T>::type U;
public:
    typedef typename std::conditional<std::is_array<U>::value,
                                      typename std::remove_extent<U>::type *,
                                      typename std::conditional<std::is_function<U>::value,
                                                                typename std::add_pointer<U>::type,
                                                                typename std::remove_cv<U>::type>::type>::type type;
};

template <bool B, class T = void> struct enable_if {};
template <class T> struct enable_if<true, T> { typedef T type; };

// primary template (used for zero types)
template <class...> struct common_type {};

//////// one type
template <class T> struct common_type<T> : common_type<T, T> {};

namespace detail {
template <class...> using void_t = void;

template <class T1, class T2> using conditional_result_t = decltype(false ? std::declval<T1>() : std::declval<T2>());

template <class, class, class = void> struct decay_conditional_result {};
template <class T1, class T2>
struct decay_conditional_result<T1, T2, void_t<conditional_result_t<T1, T2>>> : std::decay<conditional_result_t<T1, T2>> {};

template <class T1, class T2, class = void> struct common_type_2_impl : decay_conditional_result<const T1 &, const T2 &> {};

template <class T1, class T2> struct common_type_2_impl<T1, T2, void_t<conditional_result_t<T1, T2>>> : decay_conditional_result<T1, T2> {};
}

//////// two types
template <class T1, class T2>
struct common_type<T1, T2> : std::conditional<
    std::is_same<T1, typename std::decay<T1>::type>::value && std::is_same<T2, typename std::decay<T2>::type>::value,
    detail::common_type_2_impl<T1, T2>,
    common_type<typename std::decay<T2>::type, typename std::decay<T2>::type>>::type {
};

//////// 3+ types
namespace detail {
template <class AlwaysVoid, class T1, class T2, class...R> struct common_type_multi_impl {};
template <class T1, class T2, class...R>
struct common_type_multi_impl<void_t<typename common_type<T1, T2>::type>, T1, T2, R...> : common_type<typename common_type<T1, T2>::type, R...> {};
}

template <class T1, class T2, class... R> struct common_type<T1, T2, R...> : detail::common_type_multi_impl<void, T1, T2, R...> {};

// Todo: result_of

#ifdef STALIN_CXX_STD_SINCE_14
// Todo: is_final

template <class T> using remove_cv_t = typename remove_cv<T>::type;
template <class T> using remove_const_t = typename remove_const<T>::type;
template <class T> using remove_volatile_t = typename remove_volatile<T>::type;

template <class T> struct is_null_pointer : std::is_same<std::nullptr_t, std::remove_cv_t<T>> {};

template <class T> using remove_all_extents_t = typename remove_all_extents<T>::type;

template <class T> using add_cv_t = typename add_cv<T>::type;
template <class T> using add_const_t = typename add_const<T>::type;
template <class T> using add_volatile_t = typename add_volatile<T>::type;

template <class T> using add_lvalue_reference_t = typename add_lvalue_reference<T>::type;
template <class T> using add_rvalue_reference_t = typename add_rvalue_reference<T>::type;
template <class T> using remove_reference_t = typename remove_reference<T>::type;
template <class T> using remove_pointer_t = typename remove_pointer<T>::type;
template <class T> using add_pointer_t = typename add_pointer<T>::type;
template <class T> using make_signed_t = typename make_signed<T>::type;
template <class T> using make_unsigned_t = typename make_unsigned<T>::type;
template <class T> using remove_extent_t = typename remove_extent<T>::type;
template <std::size_t Len, std::size_t Align = __STDCPP_DEFAULT_NEW_ALIGNMENT__> using aligned_storage_t = typename aligned_storage<Len, Align>::type;
template <bool B, class T, class F> using conditional_t = typename conditional<B, T, F>::type;
template <class T> using decay_t = typename decay<T>::type;
template <bool B, class T = void> using enable_if_t = typename enable_if<B, T>::type;
template <class... T> using common_type_t = typename common_type<T...>::type;
template <class T> using underlying_type_t = typename underlying_type<T>::type;
#endif

#ifdef STALIN_CXX_STD_SINCE_17
// Todo: has_unique_object_representations
// Todo: is_aggregate

template <class...> using void_t = void;

template <class...> struct conjunction : std::true_type {};
template <class B1> struct conjunction<B1> : B1 {};
template <class B1, class... Bn> struct conjunction<B1, Bn...> : std::conditional_t<bool(B1::value), conjunction<Bn...>, B1> {};

template <class...> struct disjunction : std::false_type {};
template <class B1> struct disjunction<B1> : B1 {};
template <class B1, class... Bn> struct disjunction<B1, Bn...> : std::conditional_t<bool(B1::value), B1, disjunction<Bn...>> {};

template <class B> struct negation : std::bool_constant<!bool(B::value)> {};

template <class T, class U> inline constexpr bool is_same_v = is_same<T, U>::value;
template <class T> inline constexpr bool is_void_v = is_void<T>::value;
template <class T> inline constexpr bool is_null_pointer_v = is_null_pointer<T>::value;
template <class T> inline constexpr bool is_integral_v = is_integral<T>::value;
template <class T> inline constexpr bool is_floating_point_v = is_floating_point<T>::value;
template <class T> inline constexpr bool is_array_v = is_array<T>::value;
template <class T> inline constexpr bool is_const_v = is_const<T>::value;
template <class T> inline constexpr bool is_reference_v = is_reference<T>::value;
template <class T> inline constexpr bool is_function_v = is_function<T>::value;
template <class T> inline constexpr bool is_pointer_v = is_pointer<T>::value;
template <class T> inline constexpr bool is_lvalue_reference_v = is_lvalue_reference<T>::value;
template <class T> inline constexpr bool is_rvalue_reference_v = is_rvalue_reference<T>::value;
template <class T> inline constexpr bool is_member_pointer_v = is_member_pointer<T>::value;
template <class T> inline constexpr bool is_member_function_pointer_v = is_member_function_pointer<T>::value;
template <class T> inline constexpr bool is_member_object_pointer_v = is_member_object_pointer<T>::value;
//template <class T> inline constexpr bool is_enum_v = is_enum<T>::value; // Defined in `__llvm/type_traits.h` because that needs it
template <class T> inline constexpr bool is_union_v = is_union<T>::value;
template <class T> inline constexpr bool is_arithmetic_v = is_arithmetic<T>::value;
template <class T> inline constexpr bool is_fundamental_v = is_fundamental<T>::value;
template <class T> inline constexpr bool is_scalar_v = is_scalar<T>::value;
template <class T> inline constexpr bool is_class_v = is_class<T>::value;
template <class T> inline constexpr bool is_compound_v = is_compound<T>::value;
template <class T> inline constexpr bool is_volatile_v = is_volatile<T>::value;
template <class T> inline constexpr bool is_trivially_copyable_v = is_trivially_copyable<T>::value;
template <class T, class... Args> inline constexpr bool is_constructible_v = is_constructible<T, Args...>::value;
template <class T, class... Args> inline constexpr bool is_nothrow_constructible_v = is_nothrow_constructible<T, Args...>::value;
template <class T> inline constexpr bool is_default_constructible_v = is_default_constructible<T>::value;
template <class T> inline constexpr bool is_trivially_default_constructible_v = is_trivially_default_constructible<T>::value;
template <class T> inline constexpr bool is_nothrow_default_constructible_v = is_nothrow_default_constructible<T>::value;
template <class T> inline constexpr bool is_trivial_v = is_trivial<T>::value;
template <class T> inline constexpr bool is_standard_layout_v = is_standard_layout<T>::value;
#ifndef STALIN_CXX_STD_SINCE_20
template <class T> inline constexpr bool is_pod_v = is_pod<T>::value;
#endif
template <class T> inline constexpr bool is_empty_v = is_empty<T>::value;
template <class T> inline constexpr bool is_polymorphic_v = is_polymorphic<T>::value;
template <class T> inline constexpr bool is_signed_v = is_signed<T>::value;
template <class T> inline constexpr bool is_unsigned_v = is_unsigned<T>::value;
template <class T> inline constexpr bool is_copy_constructible_v = is_copy_constructible<T>::value;
template <class T> inline constexpr bool is_trivially_copy_constructible_v = is_trivially_copy_constructible<T>::value;
template <class T> inline constexpr bool is_nothrow_copy_constructible_v = is_nothrow_copy_constructible<T>::value;
template <class T> inline constexpr bool is_move_constructible_v = is_move_constructible<T>::value;
template <class T> inline constexpr bool is_trivially_move_constructible_v = is_trivially_move_constructible<T>::value;
template <class T> inline constexpr bool is_nothrow_move_constructible_v = is_nothrow_move_constructible<T>::value;
template <class T> inline constexpr bool is_copy_assignable_v = is_copy_assignable<T>::value;
template <class T> inline constexpr bool is_trivially_copy_assignable_v = is_trivially_copy_assignable<T>::value;
template <class T> inline constexpr bool is_nothrow_copy_assignable_v = is_nothrow_copy_assignable<T>::value;
template <class T> inline constexpr bool is_move_assignable_v = is_move_assignable<T>::value;
template <class T> inline constexpr bool is_trivially_move_assignable_v = is_trivially_move_assignable<T>::value;
template <class T> inline constexpr bool is_nothrow_move_assignable_v = is_nothrow_move_assignable<T>::value;
template <class T> inline constexpr bool is_destructible_v = is_destructible<T>::value;
template <class T> inline constexpr bool is_trivially_destructible_v = is_trivially_destructible<T>::value;
template <class T> inline constexpr bool is_nothrow_destructible_v = is_nothrow_destructible<T>::value;
template <class T> inline constexpr std::size_t alignment_of_v = alignment_of<T>::value;
template <class T> inline constexpr std::size_t rank_v = rank<T>::value;
template <class T, unsigned N = 0> inline constexpr std::size_t extent_v = extent<T, N>::value;
template <class Base, class Derived> inline constexpr bool is_base_of_v = is_base_of<Base, Derived>::value;
// template <class From, class To> inline constexpr bool is_convertible_v = is_convertible<From, To>::value; // Defined in `__llvm/type_traits.h` because that needs it
template <class... B> inline constexpr bool conjunction_v = conjunction<B...>::value;
template <class... B> inline constexpr bool disjunction_v = disjunction<B...>::value;
template <class B> inline constexpr bool negation_v = negation<B>::value;
#endif

#ifdef STALIN_CXX_STD_SINCE_20
// Todo: std::is_layout_compatible
// Todo: std::is_pointer_interconvertible_base_of
// Todo: std::is_invocable, std::is_invocable_r, std::is_nothrow_invocable, std::is_nothrow_invocable_r
// Todo: common_reference, basic_common_reference
// Todo: is_pointer_interconvertible_with_class
// Todo: is_corresponding_member
// Todo: is_constant_evaluated

template <class From, class To> struct is_nothrow_convertible : std::conjunction<std::is_void<From>, std::is_void<To>> {};

template <class From, class To> requires requires {
    static_cast<To(*)()>(nullptr); {
    std::declval<void (&)(To) noexcept>()(std::declval<From>())
    }
    noexcept;
}
struct is_nothrow_convertible<From, To> : std::true_type {};

template <class T> struct is_bounded_array : std::false_type {};
template <class T, std::size_t N> struct is_bounded_array<T[N]> : std::true_type {};

template <class T> struct is_unbounded_array : std::false_type {};
template <class T> struct is_unbounded_array<T[]> : std::true_type {};

template <class T> struct remove_cvref { typedef typename std::remove_cv<typename std::remove_reference<T>::type>::type type; };

template <class T> struct type_identity { using type = T; };

template <class From, class To> inline constexpr bool is_nothrow_convertible_v = is_nothrow_convertible<From, To>::value;
template <class T> inline constexpr bool is_bounded_array_v = is_bounded_array<T>::value;
template <class T> inline constexpr bool is_unbounded_array_v = is_unbounded_array<T>::value;
template <class T> using remove_cvref_t = typename remove_cvref<T>::type;
template <class T> using type_identity_t = typename type_identity<T>::type;
#endif

#ifdef STALIN_CXX_STD_SINCE_23
template <class T> inline constexpr bool is_scoped_enum_v = is_scoped_enum<T>::value;
#endif
}

#endif //CPP_STALIN_INCLUDE_TYPETRAITS_H_
