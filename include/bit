// cpp-stalin (c) Nikolas Wipper 2021

/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/. */

#ifndef CPP_STALIN_INCLUDE_BIT__
#define CPP_STALIN_INCLUDE_BIT__

#include "__math"
#include "limits"
#include "cstring"
#include "__config"
#include "concepts"
#include "type_traits"

namespace std {
#ifdef STALIN_CXX_STD_SINCE_20
enum class endian {
#ifdef _WIN32
    little = 0, big = 1, native = little
#else
    little = __ORDER_LITTLE_ENDIAN__, big = __ORDER_BIG_ENDIAN__, native = __BYTE_ORDER__
#endif
};

template <class To, class From> using __stalin_bit_type = typename std::enable_if_t<
    sizeof(To) == sizeof(From) && std::is_trivially_copyable_v<From> && std::is_trivially_copyable_v<To> && std::is_trivially_constructible_v<To>,
    To>;

template <class To, class From>
constexpr __stalin_bit_type<To, From> bit_cast(const From &src) noexcept; // Can't be implemented as a constant expression right now

template <std::unsigned_integral T>
requires (!std::same_as<T, bool>) && (!std::same_as<T, char>) && (!std::same_as<T, char8_t>) && (!std::same_as<T, char16_t>)
    && (!std::same_as<T, char32_t>) && (!std::same_as<T, wchar_t>)
constexpr bool has_single_bit(T x) noexcept {
    return x != 0 && (x & (x - 1)) == 0;
}

template <std::unsigned_integral T>
requires (!std::same_as<T, bool>) && (!std::same_as<T, char>) && (!std::same_as<T, char8_t>) && (!std::same_as<T, char16_t>)
    && (!std::same_as<T, char32_t>) && (!std::same_as<T, wchar_t>)
constexpr int countl_zero(T x) noexcept {
    int i;
    for (i = std::numeric_limits<T>::digits - 1; i >= 0; i--) {
        if ((x >> i) & 0b1) break;
    }

    return std::numeric_limits<T>::digits - 1 - i;
}

template <std::unsigned_integral T>
requires (!std::same_as<T, bool>) && (!std::same_as<T, char>) && (!std::same_as<T, char8_t>) && (!std::same_as<T, char16_t>)
    && (!std::same_as<T, char32_t>) && (!std::same_as<T, wchar_t>)
constexpr int countl_one(T x) noexcept {
    int i;
    for (i = std::numeric_limits<T>::digits - 1; i >= 0; i--) {
        if (((x >> i) & 0b1) == 0) break;
    }

    return std::numeric_limits<T>::digits - 1 - i;
}

template <std::unsigned_integral T>
requires (!std::same_as<T, bool>) && (!std::same_as<T, char>) && (!std::same_as<T, char8_t>) && (!std::same_as<T, char16_t>)
    && (!std::same_as<T, char32_t>) && (!std::same_as<T, wchar_t>)
constexpr int countr_zero(T x) noexcept {
    int i;
    for (i = 0; i < std::numeric_limits<T>::digits; i++) {
        if ((x >> i) & 0b1) break;
    }

    return i;
}

template <std::unsigned_integral T>
requires (!std::same_as<T, bool>) && (!std::same_as<T, char>) && (!std::same_as<T, char8_t>) && (!std::same_as<T, char16_t>)
    && (!std::same_as<T, char32_t>) && (!std::same_as<T, wchar_t>)
constexpr int countr_one(T x) noexcept {
    int i;
    for (i = 0; i < std::numeric_limits<T>::digits; i++) {
        if (((x >> i) & 0b1) == 0) break;
    }

    return i;
}

template <std::unsigned_integral T>
requires (!std::same_as<T, bool>) && (!std::same_as<T, char>) && (!std::same_as<T, char8_t>) && (!std::same_as<T, char16_t>)
    && (!std::same_as<T, char32_t>) && (!std::same_as<T, wchar_t>)
constexpr T bit_width(T x) noexcept {
    return sizeof(T) * 8 - countl_zero(x);

    if (x == 0) return 0;
    return (T)(unsigned long long)(1 + __stalin_const_log2(x));
}

template <std::unsigned_integral T>
requires (!std::same_as<T, bool>) && (!std::same_as<T, char>) && (!std::same_as<T, char8_t>) && (!std::same_as<T, char16_t>)
    && (!std::same_as<T, char32_t>) && (!std::same_as<T, wchar_t>)
constexpr T bit_ceil(T x) noexcept {
    if (x <= 1u)
        return T(1);
    if constexpr (std::same_as<T, decltype(+x)>)
        return T(1) << std::bit_width(T(x - 1));
    else { // for types subject to integral promotion
        constexpr int offset_for_ub = std::numeric_limits<unsigned>::digits - std::numeric_limits<T>::digits;
        return T(1u << (std::bit_width(T(x - 1)) + offset_for_ub) >> offset_for_ub);
    }
}

template <std::unsigned_integral T>
requires (!std::same_as<T, bool>) && (!std::same_as<T, char>) && (!std::same_as<T, char8_t>) && (!std::same_as<T, char16_t>)
    && (!std::same_as<T, char32_t>) && (!std::same_as<T, wchar_t>)
constexpr T bit_floor(T x) noexcept {
    if (x != 0)
        return T{1} << (std::bit_width(x) - 1);
    return 0;
}

template <std::unsigned_integral T>
requires (!std::same_as<T, bool>) && (!std::same_as<T, char>) && (!std::same_as<T, char8_t>) && (!std::same_as<T, char16_t>)
    && (!std::same_as<T, char32_t>) && (!std::same_as<T, wchar_t>)
[[nodiscard]] constexpr T __stalin_save_rotr(T x, int s) noexcept {
    int N = std::numeric_limits<T>::digits;
    size_t r = s % N;
    if (r == 0) return x;
    if (r > 0) return (x >> r) | (x << (N - r));
}

template <std::unsigned_integral T>
requires (!std::same_as<T, bool>) && (!std::same_as<T, char>) && (!std::same_as<T, char8_t>) && (!std::same_as<T, char16_t>)
    && (!std::same_as<T, char32_t>) && (!std::same_as<T, wchar_t>)
[[nodiscard]] constexpr T rotl(T x, int s) noexcept {
    int N = std::numeric_limits<T>::digits;
    size_t r = s % N;
    if (s > 0) return (x << r) | (x >> (N - r));
    if (s < 0) return __stalin_save_rotr(x, -r);
    return x;
}

template <std::unsigned_integral T>
requires (!std::same_as<T, bool>) && (!std::same_as<T, char>) && (!std::same_as<T, char8_t>) && (!std::same_as<T, char16_t>)
    && (!std::same_as<T, char32_t>) && (!std::same_as<T, wchar_t>)
[[nodiscard]] constexpr T rotr(T x, int s) noexcept {
    int N = std::numeric_limits<T>::digits;
    size_t r = s % N;
    if (s > 0) return (x >> r) | (x << (N - r));
    if (s < 0) return rotl(x, -r);
    return x;
}

template <std::unsigned_integral T>
requires (!std::same_as<T, bool>) && (!std::same_as<T, char>) && (!std::same_as<T, char8_t>) && (!std::same_as<T, char16_t>)
    && (!std::same_as<T, char32_t>) && (!std::same_as<T, wchar_t>)
constexpr int popcount(T x) noexcept {
    x = (x & (0x55555555)) + ((x >> 1) & (0x55555555));
    x = (x & (0x33333333)) + ((x >> 2) & (0x33333333));
    x = (x & (0x0f0f0f0f)) + ((x >> 4) & (0x0f0f0f0f));
    x = (x & (0x00ff00ff)) + ((x >> 8) & (0x00ff00ff));
    x = (x & (0x0000ffff)) + ((x >> 16) & (0x0000ffff));
    return x;
}

#endif
}

#endif //CPP_STALIN_INCLUDE_BIT__
