// cpp-stalin (c) Nikolas Wipper 2021

/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/. */

#ifndef CPP_STALIN_INCLUDE_OSTREAM__
#define CPP_STALIN_INCLUDE_OSTREAM__

#include "streambuf"

namespace std {
template <class charT, class traits /*= char_traits<charT>*/> // default argument defined in `iosfwd`
class basic_ostream : public basic_ios<charT, traits> {
    static_assert(is_char_traits<traits>());
public:
    class sentry;

    typedef charT char_type;
    typedef traits traits_type;
    typedef typename traits::int_type int_type;
    typedef typename traits::pos_type pos_type;
    typedef typename traits::off_type off_type;

    explicit basic_ostream(basic_streambuf<char_type, traits_type> *sb) { this->init(sb); }
    basic_ostream(const basic_ostream &) = delete;
protected:
    basic_ostream(basic_ostream &&x) { this->move(x); }
public:
    virtual ~basic_ostream() = default;

    basic_ostream &operator<<(bool val);
    basic_ostream &operator<<(short val);
    basic_ostream &operator<<(unsigned short val);
    basic_ostream &operator<<(int val);
    basic_ostream &operator<<(unsigned int val);
    basic_ostream &operator<<(long val);
    basic_ostream &operator<<(unsigned long val);
    basic_ostream &operator<<(long long val);
    basic_ostream &operator<<(unsigned long long val);
    basic_ostream &operator<<(float val);
    basic_ostream &operator<<(double val);
    basic_ostream &operator<<(long double val);
    basic_ostream &operator<<(const void *val);

    #ifdef STALIN_CXX_STD_SINCE_17
    basic_ostream &operator<<(std::nullptr_t);
    #endif

    basic_ostream &operator<<(basic_streambuf<char_type, traits_type> *sb);

    basic_ostream &operator<<(basic_ostream &(*pf)(basic_ostream &));
    basic_ostream &operator<<(basic_ios<char_type, traits_type> &(*pf)(basic_ios<char_type, traits_type> &));
    basic_ostream &operator<<(ios_base &(*pf)(ios_base &));

    basic_ostream &put(char_type c);
    basic_ostream &write(const char_type *s, streamsize n);

    pos_type tellp();
    basic_ostream &seekp(pos_type pos);
    basic_ostream &seekp(off_type off, ios_base::seekdir way);

    basic_ostream &flush();

    basic_ostream &operator=(const basic_ostream &) = delete;
protected:
    basic_ostream &operator=(basic_ostream &&rhs);

    void swap(basic_ostream &x);
};

template <class charT, class traits>
basic_ostream<charT, traits> &basic_ostream<charT, traits>::operator<<(basic_ostream &(*pf)(basic_ostream &)) {
    pf(*this);
    return *this;
}

template <class charT, class traits>
basic_ostream<charT, traits> &basic_ostream<charT, traits>::operator<<(basic_ios<char_type, traits_type> &(*pf)(basic_ios<char_type,
                                                                                                                          traits_type> &)) {
    pf(*this);
    return *this;
}

template <class charT, class traits>
basic_ostream<charT, traits> &basic_ostream<charT, traits>::operator<<(ios_base &(*pf)(ios_base &)) {
    pf(*this);
    return *this;
}

template <class charT, class traits>
basic_ostream<charT, traits> &basic_ostream<charT, traits>::put(char_type c) {
    sentry s(*this);
    if (s and this->buf_) {
        int_type r = this->buf_->sputc(c);
        if (r == traits_type::eof()) this->setstate(ios_base::badbit);
    } else {
        this->setstate(basic_ios<charT, traits>::badbit);
    }
    return *this;
}

template <class charT, class traits>
basic_ostream<charT, traits> &basic_ostream<charT, traits>::write(const char_type *s, streamsize n) {
    sentry sen(*this);
    if (sen and this->buf_) {
        int_type r = this->buf_->sputn(s, n);
    } else {
        this->setstate(ios_base::badbit);
    }
    return *this;
}

template <class charT, class traits>
typename basic_ostream<charT, traits>::pos_type basic_ostream<charT, traits>::tellp() {
    sentry s(*this);
    if (this->fail()) return -1;
    this->rdbuf_->pubseekoff(0, ios_base::cur, ios_base::out);
}

template <class charT, class traits>
basic_ostream<charT, traits> &basic_ostream<charT, traits>::seekp(pos_type pos) {
    sentry s(*this);
    if (this->fail()) return -1;
    this->rdbuf()->pubseekpos(pos, ios_base::out);
}

template <class charT, class traits>
basic_ostream<charT, traits> &basic_ostream<charT, traits>::seekp(off_type off, ios_base::seekdir way) {
    sentry s(*this);
    if (this->fail()) return -1;
    this->rdbuf()->pubseekoff(off, way, ios_base::out);
}

template <class charT, class traits>
basic_ostream<charT, traits> &basic_ostream<charT, traits>::flush() {
    sentry s(*this);
    if (s) {
        this->rdbuf()->pubsync();
    } else {
        this->setstate(ios_base::badbit);
    }
    return *this;
}
template <class charT, class traits>
basic_ostream<charT, traits> &basic_ostream<charT, traits>::operator=(basic_ostream &&rhs) {
    this->swap(rhs);
}

template <class charT, class traits>
void basic_ostream<charT, traits>::swap(basic_ostream &x) {
    this->swap(x);
}

template <class charT, class traits>
class basic_ostream<charT, traits>::sentry {
    bool state_ = true;
    basic_ostream &stream_;

public:
    explicit sentry(basic_ostream<charT, traits> &os);
    ~sentry();
    explicit operator bool() const { return state_; }
    sentry(const sentry &) = delete;
    sentry &operator=(const sentry &) = delete;
};

template <class charT, class traits>
basic_ostream<charT, traits>::sentry::sentry(basic_ostream<charT, traits> &os)
    : stream_(os) {
    if (os.fail() or os.eof()) {
        os.setstate(ios_base::failbit);
        state_ = false;
    }
}

template <class charT, class traits>
basic_ostream<charT, traits>::sentry::~sentry() {
    if (stream_.fail() or stream_.eof()) {
        stream_.setstate(ios_base::failbit);
        return;
    }

    if (stream_.flags_ & ios_base::unitbuf) {
        if (stream_.rdbuf()->pubsync() == -1)
            stream_.state_ |= ios_base::badbit;
    }
    if (stream_.tie_) stream_.tie_->flush();
}

template <class charT, class traits>
basic_ostream<charT, traits> &endl(basic_ostream<charT, traits> &os) {
    os.put(os.widen('\n'));
    os.flush();
    return os;
}

template <class charT, class traits>
std::basic_ostream<charT, traits> &ends(std::basic_ostream<charT, traits> &os) {
    os.put(charT());
    return os;
}

template <class charT, class traits>
std::basic_ostream<charT, traits> &flush(std::basic_ostream<charT, traits> &os) {
    os.flush();
    return os;
}

#ifdef STALIN_CXX_STD_SINCE_20
template <class charT, class traits>
std::basic_ostream<charT, traits> &emit_on_flush(std::basic_ostream<charT, traits> &os) {
    // todo syncbuf
    return os;
}

template <class charT, class traits>
std::basic_ostream<charT, traits> &noemit_on_flush(std::basic_ostream<charT, traits> &os) {
    // todo syncbuf
    return os;
}

template <class charT, class traits>
std::basic_ostream<charT, traits> &flush_emit(std::basic_ostream<charT, traits> &os) {
    // todo syncbuf
    return os;
}
#endif
}

#endif //CPP_STALIN_INCLUDE_OSTREAM__
